generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  postId              String       @id @default(auto()) @map("_id") @db.ObjectId
  eventName           String
  startDate           String
  startTime           String
  salary              Int
  city                String
  workingDays         Int
  noOfStaffsReq       Int
  noOfStaffsSatisfied Int?         @default(0)
  disabled            Boolean      @default(false)
  vegetableCutting    YesOrNo
  busFare             YesOrNo
  experience          YesOrNo
  address             String
  description         String
  latitude            Float
  longitude           Float
  createdAt           DateTime     @default(now())
  user                User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId              String       @db.ObjectId
  savedPosts          SavedPosts[]
}

enum YesOrNo {
  yes
  no
}

model SavedPosts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [userId])
  post      Post     @relation(fields: [postId], references: [postId], onDelete: Cascade)
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model User {
  userId        String       @id @default(auto()) @map("_id") @db.ObjectId
  username      String       @unique
  email         String       @unique
  phone         String
  password      String
  age           String
  city          String
  avatar        String?
  address       String?
  starRating    StarRating[]
  totalRatings  Int          @default(0)
  averageRating Float          @default(0.0)
  honorScore    Int          @default(100)
  createdAt     DateTime     @default(now())
  posts         Post[]
  savedPosts    SavedPosts[]
  chats         Chat[]       @relation(fields: [chatIDs], references: [chatId])
  chatIDs       String[]     @db.ObjectId
}

model StarRating {
  starRatingId String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [userId])
  userId       String   @db.ObjectId
  giverId      String
  starCount    Int
  createdAt    DateTime @default(now())
}

model Chat {
  chatId      String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User[]    @relation(fields: [userIDs], references: [userId])
  userIDs     String[]  @db.ObjectId
  seenBy      String[]  @db.ObjectId
  messages    Message[]
  lastMessage String?
  updatedAt   DateTime  @default(now())
  createdAt   DateTime  @default(now())
}

model Message {
  messageId String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [chatId])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}
